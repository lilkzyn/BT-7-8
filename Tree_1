using System;

public class Node
{
    public int Data { get; set; }
    public int Count { get; set; } = 1;
    public Node LeftNode { get; set; }
    public Node RightNode { get; set; }
}

public class BinarySearchTree
{
    public Node Root { get; set; }

    public void Insert(int value)
    {
        if (Root == null)
        {
            Root = new Node { Data = value };
            return;
        }
        InsertRecursively(Root, value);
    }

    private void InsertRecursively(Node node, int value)
    {
        if (value < node.Data)
        {
            if (node.LeftNode == null)
                node.LeftNode = new Node { Data = value };
            else
                InsertRecursively(node.LeftNode, value);
        }
        else if (value > node.Data)
        {
            if (node.RightNode == null)
                node.RightNode = new Node { Data = value };
            else
                InsertRecursively(node.RightNode, value);
        }
        else
        {
            node.Count++; 
        }
    }

    public void TraverseInOrder(Node node)
    {
        if (node != null)
        {
            TraverseInOrder(node.LeftNode);
            Console.WriteLine($"Value: {node.Data}, Count: {node.Count}");
            TraverseInOrder(node.RightNode);
        }
    }
}

public class Program
{
    public static void Main()
    {
        BinarySearchTree bst = new BinarySearchTree();
        Random random = new Random();
        for (int i = 0; i < 10000; i++)
        {
            bst.Insert(random.Next(0, 10));
        }
     Console.WriteLine("In-Order Traversal with Counts:");
        bst.TraverseInOrder(bst.Root);
    }
}
